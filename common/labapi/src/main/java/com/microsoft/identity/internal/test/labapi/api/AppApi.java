/*
 * Azure Identity Labs API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.microsoft.identity.internal.test.labapi.api;

import com.microsoft.identity.internal.test.labapi.ApiCallback;
import com.microsoft.identity.internal.test.labapi.ApiClient;
import com.microsoft.identity.internal.test.labapi.ApiException;
import com.microsoft.identity.internal.test.labapi.ApiResponse;
import com.microsoft.identity.internal.test.labapi.Configuration;
import com.microsoft.identity.internal.test.labapi.Pair;
import com.microsoft.identity.internal.test.labapi.ProgressRequestBody;
import com.microsoft.identity.internal.test.labapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.microsoft.identity.internal.test.labapi.model.AppInfo;
import com.microsoft.identity.internal.test.labapi.model.CustomErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppApi {
    private ApiClient apiClient;

    public AppApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apiAppAppidGet
     * @param appid Provide the Application ID (GUID format) to query Lab App Info (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiAppAppidGetCall(String appid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/App/{appid}"
            .replaceAll("\\{" + "appid" + "\\}", apiClient.escapeString(appid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiAppAppidGetValidateBeforeCall(String appid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'appid' is set
        if (appid == null) {
            throw new ApiException("Missing the required parameter 'appid' when calling apiAppAppidGet(Async)");
        }
        
        com.squareup.okhttp.Call call = apiAppAppidGetCall(appid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets App Info based on App ID
     * 
     * @param appid Provide the Application ID (GUID format) to query Lab App Info (required)
     * @return List&lt;AppInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AppInfo> apiAppAppidGet(String appid) throws ApiException {
        ApiResponse<List<AppInfo>> resp = apiAppAppidGetWithHttpInfo(appid);
        return resp.getData();
    }

    /**
     * Gets App Info based on App ID
     * 
     * @param appid Provide the Application ID (GUID format) to query Lab App Info (required)
     * @return ApiResponse&lt;List&lt;AppInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AppInfo>> apiAppAppidGetWithHttpInfo(String appid) throws ApiException {
        com.squareup.okhttp.Call call = apiAppAppidGetValidateBeforeCall(appid, null, null);
        Type localVarReturnType = TypeToken.getParameterized(List.class, AppInfo.class).getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets App Info based on App ID (asynchronously)
     * 
     * @param appid Provide the Application ID (GUID format) to query Lab App Info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiAppAppidGetAsync(String appid, final ApiCallback<List<AppInfo>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiAppAppidGetValidateBeforeCall(appid, progressListener, progressRequestListener);
        Type localVarReturnType = TypeToken.getParameterized(List.class, AppInfo.class).getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiAppGet
     * @param apptype Allowed Values :  \&quot;cloud\&quot;, \&quot;onprem\&quot; (optional, default to cloud)
     * @param azureenvironment Allowed Values :  \&quot;azureb2ccloud\&quot;, \&quot;azurechinacloud\&quot;, \&quot;azurecloud\&quot;, \&quot;azuregermanycloud\&quot;, \&quot;azureppe\&quot;, \&quot;azureusgovernment\&quot; (optional, default to azurecloud)
     * @param signinaudience Allowed Values :  \&quot;azureadmyorg\&quot;, \&quot;azureadmultipleorgs\&quot;, \&quot;azureadandpersonalmicrosoftaccount\&quot; (optional, default to azureadmultipleorgs)
     * @param isadminconsented Allowed Values :  \&quot;yes\&quot;, \&quot;no\&quot; (optional, default to yes)
     * @param publicclient Allowed Values :  \&quot;yes\&quot;, \&quot;no\&quot; (optional, default to yes)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiAppGetCall(String apptype, String azureenvironment, String signinaudience, String isadminconsented, String publicclient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/App";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apptype != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apptype", apptype));
        if (azureenvironment != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("azureenvironment", azureenvironment));
        if (signinaudience != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signinaudience", signinaudience));
        if (isadminconsented != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isadminconsented", isadminconsented));
        if (publicclient != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("publicclient", publicclient));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiAppGetValidateBeforeCall(String apptype, String azureenvironment, String signinaudience, String isadminconsented, String publicclient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = apiAppGetCall(apptype, azureenvironment, signinaudience, isadminconsented, publicclient, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets App Info based on Azure Environment or Sign-in Audience
     * 
     * @param apptype Allowed Values :  \&quot;cloud\&quot;, \&quot;onprem\&quot; (optional, default to cloud)
     * @param azureenvironment Allowed Values :  \&quot;azureb2ccloud\&quot;, \&quot;azurechinacloud\&quot;, \&quot;azurecloud\&quot;, \&quot;azuregermanycloud\&quot;, \&quot;azureppe\&quot;, \&quot;azureusgovernment\&quot; (optional, default to azurecloud)
     * @param signinaudience Allowed Values :  \&quot;azureadmyorg\&quot;, \&quot;azureadmultipleorgs\&quot;, \&quot;azureadandpersonalmicrosoftaccount\&quot; (optional, default to azureadmultipleorgs)
     * @param isadminconsented Allowed Values :  \&quot;yes\&quot;, \&quot;no\&quot; (optional, default to yes)
     * @param publicclient Allowed Values :  \&quot;yes\&quot;, \&quot;no\&quot; (optional, default to yes)
     * @return List&lt;AppInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AppInfo> apiAppGet(String apptype, String azureenvironment, String signinaudience, String isadminconsented, String publicclient) throws ApiException {
        ApiResponse<List<AppInfo>> resp = apiAppGetWithHttpInfo(apptype, azureenvironment, signinaudience, isadminconsented, publicclient);
        return resp.getData();
    }

    /**
     * Gets App Info based on Azure Environment or Sign-in Audience
     * 
     * @param apptype Allowed Values :  \&quot;cloud\&quot;, \&quot;onprem\&quot; (optional, default to cloud)
     * @param azureenvironment Allowed Values :  \&quot;azureb2ccloud\&quot;, \&quot;azurechinacloud\&quot;, \&quot;azurecloud\&quot;, \&quot;azuregermanycloud\&quot;, \&quot;azureppe\&quot;, \&quot;azureusgovernment\&quot; (optional, default to azurecloud)
     * @param signinaudience Allowed Values :  \&quot;azureadmyorg\&quot;, \&quot;azureadmultipleorgs\&quot;, \&quot;azureadandpersonalmicrosoftaccount\&quot; (optional, default to azureadmultipleorgs)
     * @param isadminconsented Allowed Values :  \&quot;yes\&quot;, \&quot;no\&quot; (optional, default to yes)
     * @param publicclient Allowed Values :  \&quot;yes\&quot;, \&quot;no\&quot; (optional, default to yes)
     * @return ApiResponse&lt;List&lt;AppInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AppInfo>> apiAppGetWithHttpInfo(String apptype, String azureenvironment, String signinaudience, String isadminconsented, String publicclient) throws ApiException {
        com.squareup.okhttp.Call call = apiAppGetValidateBeforeCall(apptype, azureenvironment, signinaudience, isadminconsented, publicclient, null, null);
        Type localVarReturnType = TypeToken.getParameterized(List.class, AppInfo.class).getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets App Info based on Azure Environment or Sign-in Audience (asynchronously)
     * 
     * @param apptype Allowed Values :  \&quot;cloud\&quot;, \&quot;onprem\&quot; (optional, default to cloud)
     * @param azureenvironment Allowed Values :  \&quot;azureb2ccloud\&quot;, \&quot;azurechinacloud\&quot;, \&quot;azurecloud\&quot;, \&quot;azuregermanycloud\&quot;, \&quot;azureppe\&quot;, \&quot;azureusgovernment\&quot; (optional, default to azurecloud)
     * @param signinaudience Allowed Values :  \&quot;azureadmyorg\&quot;, \&quot;azureadmultipleorgs\&quot;, \&quot;azureadandpersonalmicrosoftaccount\&quot; (optional, default to azureadmultipleorgs)
     * @param isadminconsented Allowed Values :  \&quot;yes\&quot;, \&quot;no\&quot; (optional, default to yes)
     * @param publicclient Allowed Values :  \&quot;yes\&quot;, \&quot;no\&quot; (optional, default to yes)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiAppGetAsync(String apptype, String azureenvironment, String signinaudience, String isadminconsented, String publicclient, final ApiCallback<List<AppInfo>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiAppGetValidateBeforeCall(apptype, azureenvironment, signinaudience, isadminconsented, publicclient, progressListener, progressRequestListener);
        Type localVarReturnType = TypeToken.getParameterized(List.class, AppInfo.class).getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
