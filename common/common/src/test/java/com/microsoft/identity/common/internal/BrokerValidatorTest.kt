// Copyright (c) Microsoft Corporation.
// All rights reserved.
//
// This code is licensed under the MIT License.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
package com.microsoft.identity.common.internal

import com.microsoft.identity.common.internal.broker.BrokerData
import com.microsoft.identity.common.internal.broker.BrokerValidator
import com.microsoft.identity.common.internal.util.PackageUtils
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.robolectric.RobolectricTestRunner
import java.security.cert.X509Certificate

/**
 * Unit Tests for [BrokerValidator].
 */
@RunWith(RobolectricTestRunner::class)
class BrokerValidatorTest {

    // Extracted from debugger.
    private val mockLtwCertificate = byteArrayOf(48, -126, 3, 121, 48, -126, 2, 97, -96, 3, 2, 1, 2, 2, 4, 96, 91, 18, -41, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 11, 5, 0, 48, 108, 49, 16, 48, 14, 6, 3, 85, 4, 6, 19, 7, 85, 110, 107, 110, 111, 119, 110, 49, 16, 48, 14, 6, 3, 85, 4, 8, 19, 7, 85, 110, 107, 110, 111, 119, 110, 49, 16, 48, 14, 6, 3, 85, 4, 7, 19, 7, 85, 110, 107, 110, 111, 119, 110, 49, 16, 48, 14, 6, 3, 85, 4, 10, 19, 7, 85, 110, 107, 110, 111, 119, 110, 49, 16, 48, 14, 6, 3, 85, 4, 11, 19, 7, 85, 110, 107, 110, 111, 119, 110, 49, 16, 48, 14, 6, 3, 85, 4, 3, 19, 7, 85, 110, 107, 110, 111, 119, 110, 48, 32, 23, 13, 50, 51, 48, 54, 48, 55, 49, 57, 49, 53, 52, 54, 90, 24, 15, 52, 55, 54, 49, 48, 53, 48, 52, 49, 57, 49, 53, 52, 54, 90, 48, 108, 49, 16, 48, 14, 6, 3, 85, 4, 6, 19, 7, 85, 110, 107, 110, 111, 119, 110, 49, 16, 48, 14, 6, 3, 85, 4, 8, 19, 7, 85, 110, 107, 110, 111, 119, 110, 49, 16, 48, 14, 6, 3, 85, 4, 7, 19, 7, 85, 110, 107, 110, 111, 119, 110, 49, 16, 48, 14, 6, 3, 85, 4, 10, 19, 7, 85, 110, 107, 110, 111, 119, 110, 49, 16, 48, 14, 6, 3, 85, 4, 11, 19, 7, 85, 110, 107, 110, 111, 119, 110, 49, 16, 48, 14, 6, 3, 85, 4, 3, 19, 7, 85, 110, 107, 110, 111, 119, 110, 48, -126, 1, 34, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0, 3, -126, 1, 15, 0, 48, -126, 1, 10, 2, -126, 1, 1, 0, -114, -42, 71, 18, -67, 15, 49, 106, 4, 58, 71, 99, 19, 86, -13, -108, 121, -109, -39, -46, -46, -33, 99, 28, 28, -91, 46, -63, 25, -112, -85, -71, 126, -28, -86, 10, 93, 113, 16, -78, 17, 107, 61, -23, -58, -98, -99, 39, -46, 110, 66, -123, -27, -25, -97, 91, -110, -71, 112, 39, -39, -11, 19, -37, -64, 103, -97, -118, 29, -81, 13, -91, -31, -100, -58, -26, 92, 127, -75, -69, 51, -17, -103, -20, 26, -16, -88, 90, 73, 5, -120, 18, 56, 66, -60, 120, -9, -115, -17, 62, 87, -33, 1, 77, -61, -58, 98, -90, -45, 11, 73, 71, -5, 98, 61, -101, 61, -111, 53, -79, -72, -58, -15, -51, -45, 38, 124, 78, 66, 106, -105, 115, 106, -51, -71, -118, 93, -42, -125, -87, 17, -116, -55, -30, 122, -111, -113, 61, -8, -1, 105, 102, -110, -9, 85, 8, 107, 60, 44, 87, -121, 127, 81, 43, 15, 44, -26, -80, 30, -18, 4, 17, 88, 48, -86, -83, 79, -110, 43, -49, 101, 122, -23, -36, 26, 48, 91, -50, 104, 65, 74, -84, 2, 30, -101, 111, -53, -113, -87, -114, -21, -79, -15, -44, 68, 61, 12, 125, 34, 75, -3, 89, -82, -2, 123, 29, -2, -108, 16, -96, 117, -38, -37, 124, 2, 104, 43, 108, 27, 98, 91, 103, 29, 81, -90, 55, -26, 61, -17, -76, -110, 62, 59, 116, 36, 26, -127, -94, 35, -43, 43, 73, -117, 10, -113, 113, 2, 3, 1, 0, 1, -93, 33, 48, 31, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, -68, -38, -7, 32, 64, -64, 83, -41, 125, -107, 26, 48, 34, 73, 41, -92, -34, -47, -122, 105, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 11, 5, 0, 3, -126, 1, 1, 0, 121, 87, 71, 55, 70, -119, 75, 49, -70, 0, -115, -60, -45, -67, -41, 15, 24, -99, 88, -87, -49, -57, -65, -100, 23, 102, -42, -118, 9, 48, 6, 109, -38, -123, -76, -63, 50, -78, -48, -70, -83, 24, -117, -43, -29, -43, -4, 127, 63, 117, -128, 67, -52, -62, -31, 35, 113, -16, 30, 23, 44, -93, 55, -34, -16, 44, 25, 13, 41, -79, -121, -8, 14, -46, 21, 2, -66, -16, -76, -98, -63, 127, -14, -110, -66, 19, 110, -26, 117, -1, -60, -62, 28, -102, 119, -84, 9, -11, 127, 87, 62, -96, -94, -20, 92, -18, 106, -55, -84, 42, -76, -31, 112, 104, -46, 65, -101, -68, -19, -12, -74, 112, -76, -28, -60, 118, -49, -91, -34, 45, 123, 108, 107, 4, -61, 74, 80, 72, 113, 53, 82, 106, 83, 57, -74, 41, 7, 51, -32, -105, 56, -70, 43, 76, 113, -91, 81, -122, 51, 2, -106, -15, -35, -45, -38, 108, -76, 24, 30, -122, 72, -76, -43, -124, -2, 28, 126, -58, -8, -6, 71, 56, 103, 9, 64, -57, 58, -101, 104, -76, -11, -128, -86, 62, -35, -117, 109, 56, 28, 26, 50, -125, -16, 69, -46, 12, 66, 101, 40, 41, 11, -38, 104, 91, 91, -49, -13, 86, -100, 55, -10, -113, 57, -117, -62, -63, -101, 75, -53, 5, -40, 81, -74, 32, 97, -44, -128, 95, -2, 63, -36, 85, -73, 22, 31, -59, 91, 71, 85, 25, 120, -8, 26, 75, 110, -38)
    private val mockDebugAuthAppCertificate = byteArrayOf(48, -126, 3, 13, 48, -126, 1, -11, -96, 3, 2, 1, 2, 2, 4, 68, -65, 125, -90, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 11, 5, 0, 48, 55, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 16, 48, 14, 6, 3, 85, 4, 10, 19, 7, 65, 110, 100, 114, 111, 105, 100, 49, 22, 48, 20, 6, 3, 85, 4, 3, 19, 13, 65, 110, 100, 114, 111, 105, 100, 32, 68, 101, 98, 117, 103, 48, 30, 23, 13, 49, 53, 49, 50, 49, 48, 50, 51, 48, 51, 52, 49, 90, 23, 13, 52, 53, 49, 50, 48, 50, 50, 51, 48, 51, 52, 49, 90, 48, 55, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 16, 48, 14, 6, 3, 85, 4, 10, 19, 7, 65, 110, 100, 114, 111, 105, 100, 49, 22, 48, 20, 6, 3, 85, 4, 3, 19, 13, 65, 110, 100, 114, 111, 105, 100, 32, 68, 101, 98, 117, 103, 48, -126, 1, 34, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0, 3, -126, 1, 15, 0, 48, -126, 1, 10, 2, -126, 1, 1, 0, -91, 118, 66, 86, -67, 107, 45, -84, 103, -21, 81, 13, -122, -9, 103, 80, -92, 77, 102, -98, 86, 78, -123, -64, -86, -83, -36, -12, -19, 83, -123, -31, 126, -23, 55, -73, 94, 61, 70, 63, 119, 98, 90, -10, -34, 85, -33, 2, -68, 62, -68, 86, -91, -35, 14, -59, -75, -51, -120, -47, -28, -18, -3, 3, 127, -61, 121, -123, -48, -7, -120, -104, 5, 66, 95, -119, -14, 125, -3, -18, -77, -120, -44, 120, 113, 63, -5, 109, -88, 11, -111, -115, 42, 115, -25, -78, 84, 72, -5, -3, 103, -33, -39, -61, -69, 118, -127, 56, -82, 76, -25, 91, 35, -99, 118, 27, 16, 76, -112, 113, 119, 85, -20, -25, 65, 61, -28, -31, 44, -117, -47, -64, 66, 125, -40, 27, 90, 17, 82, 63, -93, -119, 78, -98, 116, 46, 107, -25, 60, -92, 15, -73, -103, -5, 82, -30, 30, -127, 93, 107, 80, 69, -124, -99, -8, 76, -46, -63, 78, 29, -127, 23, -26, -128, -18, 94, -12, -95, 26, -120, 8, -50, 103, 31, -94, -26, 70, -51, -128, 32, -112, -95, -119, 68, 43, -8, -2, -60, 72, -121, 4, -52, -15, -60, -72, -12, -118, 7, -46, 67, 67, 75, -114, -114, -127, -113, 73, 94, -94, -110, -121, 69, -71, 46, 91, -107, -22, 117, 8, -70, -59, 27, -127, 61, -100, -58, 102, 117, -125, 61, 26, 4, -103, 97, 38, 77, -28, 1, -76, 120, 53, 91, -15, 15, -92, -21, 2, 3, 1, 0, 1, -93, 33, 48, 31, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 82, 54, 78, -119, 108, 39, -10, 117, 50, 6, -82, -32, 38, -50, 50, 29, 35, 65, 5, 27, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 11, 5, 0, 3, -126, 1, 1, 0, 110, -72, -118, -12, 14, 111, 5, 54, -10, -55, 106, -5, -45, 27, 60, -95, -71, 96, -92, -100, 103, -126, -17, 61, -12, 9, -13, 15, 29, -59, -61, 38, -11, 63, -121, 118, 2, 28, 58, -53, 59, -104, 32, -71, 12, 88, 113, 60, 78, -69, -126, 126, 22, 19, -119, 24, -11, -77, -98, -98, -1, -17, 56, -91, 30, 70, -83, -75, 0, -36, -2, -105, -91, -2, 50, 111, -42, 75, -93, 70, 120, 75, 114, -41, -30, 94, 112, 22, 61, -72, -70, -21, -29, -94, 14, 51, -1, 15, 22, 36, 98, -15, -82, 87, 7, -78, -24, 32, 13, 102, 62, 79, 45, 103, -84, -110, 62, 99, -19, 8, 25, -5, 38, -83, -41, -22, 3, 111, -44, -47, -85, -44, 8, -126, 47, 49, -29, -76, 101, -98, 98, -88, -59, -101, 93, 84, 17, -77, -103, 63, -84, 13, -20, -2, 95, 68, -38, -72, -4, 17, 94, -25, -51, 6, -6, -23, 88, -27, -108, -23, -62, 77, 92, -23, -124, -32, 111, -101, -32, 37, -80, 68, 122, -51, 22, 114, -68, -122, 116, -60, -112, 113, 58, 38, 1, -108, -111, -23, -52, 80, -39, -107, -23, 84, -100, 12, -38, -75, 111, -87, -99, 110, -7, 104, 95, -83, 30, -71, 66, -98, 110, 111, 83, 86, -39, -6, -74, 26, 114, -124, 40, 112, -12, 10, 17, 110, -97, -128, -104, -37, 96, 106, 76, 58, 123, -2, 4, 125, 111, 55, 33, -80, 8, -29, -81, -27)
    private val mockReleaseAuthAppCertificate = byteArrayOf(48, -126, 7, 25, 48, -126, 5, 1, -96, 3, 2, 1, 2, 2, 19, 51, 0, 0, 0, 62, 40, -90, -32, -77, -72, 124, 116, -27, 0, 0, 0, 0, 0, 62, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 11, 5, 0, 48, -127, -112, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3, 85, 4, 8, 19, 10, 87, 97, 115, 104, 105, 110, 103, 116, 111, 110, 49, 16, 48, 14, 6, 3, 85, 4, 7, 19, 7, 82, 101, 100, 109, 111, 110, 100, 49, 30, 48, 28, 6, 3, 85, 4, 10, 19, 21, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 67, 111, 114, 112, 111, 114, 97, 116, 105, 111, 110, 49, 58, 48, 56, 6, 3, 85, 4, 3, 19, 49, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 67, 111, 114, 112, 111, 114, 97, 116, 105, 111, 110, 32, 84, 104, 105, 114, 100, 32, 80, 97, 114, 116, 121, 32, 77, 97, 114, 107, 101, 116, 112, 108, 97, 99, 101, 32, 80, 67, 65, 48, 30, 23, 13, 49, 52, 49, 49, 48, 53, 49, 55, 52, 54, 50, 54, 90, 23, 13, 51, 52, 48, 57, 50, 53, 49, 55, 52, 54, 50, 54, 90, 48, -127, -49, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3, 85, 4, 8, 19, 10, 87, 97, 115, 104, 105, 110, 103, 116, 111, 110, 49, 16, 48, 14, 6, 3, 85, 4, 7, 19, 7, 82, 101, 100, 109, 111, 110, 100, 49, 30, 48, 28, 6, 3, 85, 4, 10, 19, 21, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 67, 111, 114, 112, 111, 114, 97, 116, 105, 111, 110, 49, 50, 48, 48, 6, 3, 85, 4, 11, 19, 41, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 65, 122, 117, 114, 101, 32, 65, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 111, 114, 32, 102, 111, 114, 32, 65, 110, 100, 114, 111, 105, 100, 49, 69, 48, 67, 6, 3, 85, 4, 3, 19, 60, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 67, 111, 114, 112, 111, 114, 97, 116, 105, 111, 110, 32, 84, 104, 105, 114, 100, 32, 80, 97, 114, 116, 121, 32, 77, 97, 114, 107, 101, 116, 112, 108, 97, 99, 101, 32, 40, 68, 111, 32, 78, 111, 116, 32, 84, 114, 117, 115, 116, 41, 48, -126, 2, 34, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0, 3, -126, 2, 15, 0, 48, -126, 2, 10, 2, -126, 2, 1, 0, -69, -120, 39, -70, -13, 86, -110, 94, -126, -92, 74, -88, -30, 102, -72, -124, 100, -120, -67, 78, -60, 60, 98, -127, -32, 51, 33, -69, 43, -44, -51, 23, -5, -10, 89, -97, -68, -35, 63, 5, 31, -46, 32, -88, 113, 51, 49, 12, -118, 56, 84, -76, -67, 103, 92, 106, 65, -73, -122, 81, 72, 67, -94, -64, -15, -46, -7, -106, 122, 88, 34, 6, 98, 58, 112, 104, -87, 100, -27, 56, -90, -121, 97, 72, -26, -8, 69, 116, -24, -122, 4, -14, 126, 103, -49, 60, 98, 22, 26, 26, 19, 92, 104, -95, 34, 0, -89, -125, -92, 67, 104, 33, -112, 116, -9, 97, 97, -118, 52, -47, 112, -97, -20, 9, 12, -23, -20, -78, 65, -111, -74, 105, -31, 26, 56, 63, -46, -95, -100, 122, 12, 127, 44, 72, 100, -86, -120, -96, 36, 24, 27, -88, 72, -54, 65, -109, -3, 61, -19, 70, 79, 13, 103, -111, 56, 89, -121, 121, -1, -64, -111, 105, -128, -51, -26, -84, 96, -2, 37, -43, -52, 121, 66, 38, 94, 9, 45, 118, -58, 114, 62, 1, 48, -6, 65, -100, 115, 67, 34, 30, 92, -111, -65, -121, 48, -110, 34, 108, -35, 83, -115, 26, -68, -126, 112, 84, 93, -46, -100, 25, 1, -125, 49, 116, -88, -100, 104, -10, -85, -5, 61, 44, 41, 98, -56, 115, 95, -103, -84, -110, -64, -11, -69, 26, 83, -24, -57, -67, 123, 33, -64, 63, -55, -39, 123, -90, -43, -90, -100, -6, -44, -51, -66, -108, -49, -49, 93, 68, 116, -38, -102, 119, 1, 50, -86, -37, -20, -123, 109, 68, 43, 78, 31, 47, -26, -78, -42, 24, -102, -7, 21, 84, -91, 33, 0, -103, 122, 20, -116, -24, -51, 109, -8, 64, 16, -100, -35, -57, -128, 123, 111, -119, 63, -56, -39, -113, 4, -109, -92, 78, -50, -121, 12, 44, -91, 94, 0, 98, -70, 122, 109, -50, -109, 18, -18, -25, 95, -93, -75, 25, 110, -80, 68, 102, 98, -112, 57, -99, -105, 81, 37, -102, -92, -93, 82, -117, -128, -83, 43, -61, -12, -115, 38, 53, -91, 116, -89, -23, 45, 112, 118, 97, -101, -53, 35, 122, -90, -30, 127, 37, 30, -57, 68, 111, 127, -87, -57, -118, -107, 43, -17, -108, 34, 58, -121, -85, 7, 107, -85, 84, -50, 123, 125, -28, 5, -56, -111, 107, 88, -37, 16, 79, -24, -56, -22, -68, 81, -22, 123, 88, 64, 118, -96, 124, -31, -66, -55, -52, -21, -124, -85, -114, -63, -100, -94, 98, -7, 61, 91, -64, -104, 59, -39, 116, -22, -105, 21, 32, 54, -4, -4, -71, -69, -90, 25, -81, 18, 88, -127, -109, -116, -57, -80, -6, 72, 47, -85, 123, 111, 22, 97, -29, -82, -105, -73, 104, -77, -62, -108, 41, 80, -90, 50, 18, -99, 9, 21, -84, -21, -6, -31, 28, -98, -61, 3, -93, -82, -51, 9, 102, -2, 29, -21, -95, -124, 67, -107, 6, -42, -98, -112, 67, 2, 3, 1, 0, 1, -93, -126, 1, 41, 48, -126, 1, 37, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 60, -15, -121, -62, 46, 88, 96, 123, -7, 123, -80, -128, -3, 36, -123, 98, -98, -78, 7, 65, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, -128, 20, -82, -111, -28, 96, -97, -104, -64, 11, -33, 26, 11, 107, -16, 86, 51, 39, 71, -84, -57, -57, 48, 92, 6, 3, 85, 29, 31, 4, 85, 48, 83, 48, 81, -96, 79, -96, 77, -122, 75, 104, 116, 116, 112, 58, 47, 47, 99, 114, 108, 46, 109, 105, 99, 114, 111, 115, 111, 102, 116, 46, 99, 111, 109, 47, 112, 107, 105, 47, 99, 114, 108, 47, 112, 114, 111, 100, 117, 99, 116, 115, 47, 77, 105, 99, 67, 111, 114, 84, 104, 105, 80, 97, 114, 77, 97, 114, 80, 67, 65, 95, 50, 48, 49, 48, 45, 49, 48, 45, 48, 53, 46, 99, 114, 108, 48, 96, 6, 8, 43, 6, 1, 5, 5, 7, 1, 1, 4, 84, 48, 82, 48, 80, 6, 8, 43, 6, 1, 5, 5, 7, 48, 2, -122, 68, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 109, 105, 99, 114, 111, 115, 111, 102, 116, 46, 99, 111, 109, 47, 112, 107, 105, 47, 99, 101, 114, 116, 115, 47, 77, 105, 99, 67, 111, 114, 84, 104, 105, 80, 97, 114, 77, 97, 114, 80, 67, 65, 95, 50, 48, 49, 48, 45, 49, 48, 45, 48, 53, 46, 99, 114, 116, 48, 12, 6, 3, 85, 29, 19, 1, 1, -1, 4, 2, 48, 0, 48, 21, 6, 3, 85, 29, 37, 4, 14, 48, 12, 6, 10, 43, 6, 1, 4, 1, -126, 55, 76, 2, 1, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 11, 5, 0, 3, -126, 2, 1, 0, 25, -3, -44, 32, 58, -124, 50, -85, -101, -52, 21, 100, 87, -25, 42, 123, 94, -9, 13, -1, -110, -107, 71, 7, 29, 45, 60, -31, -68, 1, -12, 60, -85, -40, -92, -29, 102, 67, -27, 50, -3, 109, 39, -32, -39, -104, 45, 117, 46, 57, 10, -97, 28, -11, -114, -32, 105, -66, -98, -59, -73, -99, -8, 38, 6, 18, 85, 85, 67, 30, 106, 35, -113, -22, -27, -62, 84, 27, -67, -106, -12, 20, 0, 28, -73, -13, 71, -115, 110, 79, 43, 26, 98, 85, 11, 33, 70, 110, 105, -97, -104, 17, -118, -74, -107, 64, 46, 63, -47, -105, 82, 24, -122, 19, -77, 102, 81, -54, -80, 81, -54, 98, -93, -72, 59, -99, 101, -65, -36, -3, -94, 25, 53, 27, -42, 115, -41, 125, -69, -100, 60, -124, 124, -11, -27, -124, 68, -117, 84, -71, -5, -40, 20, 83, 66, 108, 58, -114, -36, 89, -114, 33, -82, 39, 73, -3, -16, -37, -100, 71, -57, -29, -91, 16, 32, -6, 48, -64, -88, 44, -32, -29, -66, -92, -53, 109, 15, -73, -76, 113, 1, 36, -113, -128, -39, 33, 110, 35, 45, -57, 99, -58, -114, 61, -26, -87, 24, -107, -98, -104, 15, 64, 7, -39, -91, -79, -46, 3, 125, -23, -60, -93, 8, 26, 89, 76, -121, -65, -26, 114, 7, 31, -48, 48, -86, -103, -86, 123, -120, -11, -9, 51, 20, -126, 59, 25, -100, 61, 62, 67, 49, -100, 47, -106, -10, 106, 36, 109, -75, -123, 48, 60, 11, -85, -109, 22, -60, 93, -49, 25, -65, -119, 116, -21, -73, -75, 123, -87, -31, -67, -8, 90, 127, 103, 95, -115, 91, 111, -60, 79, -16, -87, -29, 35, -22, 108, 118, 31, 64, 117, 103, -107, -67, 88, -16, -83, 126, 25, -93, -56, -103, -21, -118, -94, 68, -17, 127, -76, 25, -103, 95, 9, -121, -96, 41, -124, 101, -57, 88, 43, -122, -128, 126, -80, 39, -71, 101, -73, -83, -33, -9, -21, -75, -77, -115, 111, -84, -59, -26, 124, 75, 106, -26, 25, 82, 102, 87, 125, 54, -8, -55, -97, 81, 73, -9, 114, -17, -99, 27, -79, -96, 83, 104, -49, -103, -22, 33, -13, 18, -23, 81, 19, 88, 39, -102, -105, -114, -41, 31, -106, -63, -84, -88, 95, -46, -62, 38, 11, 62, -24, 104, -116, -14, 41, -104, -3, 76, 85, -24, 11, -80, 85, 124, -42, -101, 86, 30, 18, 43, -125, -30, 49, 44, -111, -99, -125, -107, 41, 81, 42, 8, 14, 59, -4, -22, 90, 124, 63, -77, 87, -28, 2, 13, 3, -23, 46, 21, 27, -13, 115, -15, -41, -61, -110, 109, 113, 87, 65, 64, -112, 26, 89, -113, -120, 21, -44, 124, -7, 39, -111, 21, 87, -9, -41, -43, 33, 48, -46, 24, -52, 86, -26, -30, -118, 114, -43, -55, 86, -26, -58, -24, -43, -116, -60, -102, 100, -47, -57, 64, 61, 73, -90, -69, -47, -33, -53, 114, 85, -4, -86, 72, 32)

    @Test
    fun testValidationSucceed(){
        val validator = BrokerValidator(
            allowedBrokerApps = setOf(BrokerData.debugMockLtw),
            getSigningCertificateForApp = {
                getMockBrokerRawCert()
            },
            validateSigningCertificate = BrokerValidator.Companion::validateSigningCertificate
        )

        Assert.assertTrue(validator.isValidBrokerPackage(BrokerData.debugMockLtw.packageName))
        Assert.assertFalse(validator.isValidBrokerPackage(BrokerData.prodCompanyPortal.packageName))
    }

    @Test
    fun testValidationFailed_NotInAllowedBrokerAppList(){
        val validator = BrokerValidator(
            allowedBrokerApps = setOf(
                BrokerData.debugMockAuthApp,
                BrokerData.debugMockCp),
            getSigningCertificateForApp = {
                getMockBrokerRawCert()
            },
            validateSigningCertificate = BrokerValidator.Companion::validateSigningCertificate
        )

        Assert.assertFalse(validator.isValidBrokerPackage(BrokerData.debugMockLtw.packageName))
    }

    @Test
    fun testValidationFailed_CannotGetSigningCertificate(){
        val validator = BrokerValidator(
            allowedBrokerApps = setOf(BrokerData.debugMockLtw),
            getSigningCertificateForApp = {
                throw RuntimeException("Fail to get cert for some reason")
            },
            validateSigningCertificate = BrokerValidator.Companion::validateSigningCertificate
        )

        Assert.assertFalse(validator.isValidBrokerPackage(BrokerData.debugMockLtw.packageName))
    }

    @Test
    fun testSigningCertificationValidationFailed(){
        val validator = BrokerValidator(
            allowedBrokerApps = setOf(BrokerData.debugMockLtw),
            getSigningCertificateForApp = {
                getMockBrokerRawCert()
            },
            validateSigningCertificate = { _, _ ->
               throw RuntimeException("Fail to validate for some reason")
            }
        )

        Assert.assertFalse(validator.isValidBrokerPackage(BrokerData.debugMockLtw.packageName))
    }

    @Test
    fun testValidAppWithReleaseAndDebugAppsAddedToKnownApps() {
        // Validate if debug app is installed, it should be recognized as a valid broker app
        val validatorWithDebugAppInsatlled = BrokerValidator(
            allowedBrokerApps = setOf(BrokerData.debugMicrosoftAuthenticator,
                BrokerData.prodMicrosoftAuthenticator),
            getSigningCertificateForApp = { packageName: String ->
                listOf(PackageUtils.createCertificateFromByteArray(mockDebugAuthAppCertificate))
            },
            validateSigningCertificate = BrokerValidator.Companion::validateSigningCertificate
        )

        Assert.assertTrue(validatorWithDebugAppInsatlled.isValidBrokerPackage(BrokerData.debugMicrosoftAuthenticator.packageName))

        // Validate if release app is installed, it should be recognized as a valid broker app
        val validatorWithReleaseAppInsatlled = BrokerValidator(
            allowedBrokerApps = setOf(BrokerData.debugMicrosoftAuthenticator,
                BrokerData.prodMicrosoftAuthenticator),
            getSigningCertificateForApp = {
                listOf(PackageUtils.createCertificateFromByteArray(mockReleaseAuthAppCertificate))
            },
            validateSigningCertificate = BrokerValidator.Companion::validateSigningCertificate
        )
        Assert.assertTrue(validatorWithReleaseAppInsatlled.isValidBrokerPackage(BrokerData.prodMicrosoftAuthenticator.packageName))
    }

    @Test
    fun testValidAppWithReleaseAppsAddedToKnownApps() {
        // Validate if release app is installed, it should be recognized as a valid broker app
        val validatorWithReleaseAppInsatlled = BrokerValidator(
            allowedBrokerApps = setOf(BrokerData.prodMicrosoftAuthenticator),
            getSigningCertificateForApp = {
                listOf(PackageUtils.createCertificateFromByteArray(mockReleaseAuthAppCertificate))
            },
            validateSigningCertificate = BrokerValidator.Companion::validateSigningCertificate
        )
        Assert.assertTrue(validatorWithReleaseAppInsatlled.isValidBrokerPackage(BrokerData.prodMicrosoftAuthenticator.packageName))
    }

    private fun getMockBrokerRawCert(): List<X509Certificate>{
        return listOf(PackageUtils.createCertificateFromByteArray(mockLtwCertificate))
    }

}