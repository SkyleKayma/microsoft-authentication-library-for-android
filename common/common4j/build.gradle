plugins {
    id 'java-library'
    id 'com.microsoft.identity.buildsystem' version '0.2.3'
    id 'maven-publish'
    id 'com.github.gmazzo.buildconfig' version '3.0.0'
    id 'java-test-fixtures'
    id 'idea'
    id 'org.jetbrains.kotlin.jvm'
}

repositories {
    mavenCentral()
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId = "com.microsoft.identity"
            artifactId = "common4j"
            from components.java

            pom {
                name.set("common4j")
                description.set("This library contains common java code shared between the Active Directory Authentication Library (ADAL) for Android and the Microsoft Authentication Library (MSAL) for Android. This library includes only internal classes and is NOT part of the public API")
                url.set("https://github.com/AzureAD/microsoft-authentication-library-common-for-android")
                developers {
                    developer {
                        id.set("microsoft")
                        name.set("Microsoft")
                    }
                }
                licenses {
                    license {
                        name.set("MIT License")
                    }
                }
                inceptionYear.set("2021")
                scm {
                    url.set("https://github.com/AzureAD/microsoft-authentication-library-common-for-android/tree/master")
                }
                properties = [
                        branch: 'master',
                        version: project.version
                ]
            }
        }
    }

    repositories {
        maven {
            name = "openium"
            url = uri("https://maven.openium.fr/releases")
            credentials(PasswordCredentials)
        }
    }
}

def desugarCode = project.hasProperty("sugar") ? sugar.toBoolean() : false
def enableCodeCoverage = project.hasProperty("codeCoverageEnabled") ? codeCoverageEnabled.toBoolean() : false

buildSystem {
    desugar = desugarCode
}

codeCoverageReport {
    coverage.enabled = enableCodeCoverage
}

apply from: './versioning/version_tasks.gradle'

project.ext.vstsUsername = System.getenv("ENV_VSTS_MVN_ANDROIDCOMMON_USERNAME") ?: project.findProperty("vstsUsername")
project.ext.vstsPassword = System.getenv("ENV_VSTS_MVN_ANDROIDCOMMON_ACCESSTOKEN") ?: project.findProperty("vstsMavenAccessToken")

version = getAppVersionName()

task sourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    classifier = 'sources'
    destinationDirectory = reporting.file("$project.buildDir/outputs/jars")
}

jar {
    manifest {
        attributes('Implementation-Title': project.name, 'Implementation-Version': project.version)
    }
}

sourceSets {
    main {
        java.srcDirs = ['src/main', "$project.buildDir/generated/source/buildConfig/main"]
    }
    test {
        java.srcDirs = ['src/test']
    }
}

// This is needed to get Android Studio to resolve test fixtures dependencies
// by default test fixtures dependencies are not resolved in IDE
configurations {
    resolvableTestFixturesImplementation {
        canBeResolved true;
    }
}

configurations.testFixturesImplementation.extendsFrom(configurations.resolvableTestFixturesImplementation);

idea {
    module {
        // This is needed to get Android Studio to resolve test fixtures dependencies
        // by default test fixtures dependencies are not resolved in IDE
        scopes.COMPILE.plus += [configurations.resolvableTestFixturesImplementation]
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${rootProject.ext.kotlinVersion}"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:${rootProject.ext.kotlinVersion}"

    compileOnly "com.github.spotbugs:spotbugs-annotations:${rootProject.ext.spotBugsAnnotationVersion}"
    compileOnly "org.projectlombok:lombok:${rootProject.ext.lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${rootProject.ext.lombokVersion}"
    implementation "com.nimbusds:nimbus-jose-jwt:${rootProject.ext.nimbusVersion}"
    implementation "com.google.code.gson:gson:${rootProject.ext.gsonVersion}"
    implementation "org.json:json:${rootProject.ext.jsonVersion}"
    implementation "com.github.stephenc.jcip:jcip-annotations:${rootProject.ext.jcipAnnotationVersion}"
    implementation "cz.msebera.android:httpclient:${rootProject.ext.mseberaApacheHttpClientVersion}"

    testCompileOnly "com.github.spotbugs:spotbugs-annotations:${rootProject.ext.spotBugsAnnotationVersion}"
    testCompileOnly "org.projectlombok:lombok:${rootProject.ext.lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${rootProject.ext.lombokVersion}"
    testImplementation "junit:junit:${rootProject.ext.junitVersion}"
    testImplementation "org.mockito:mockito-core:${rootProject.ext.mockitoCoreVersion}"
    testImplementation "io.mockk:mockk:${rootProject.ext.mockkVersion}"
    testImplementation "org.mockito:mockito-inline:${rootProject.ext.mockitoCoreVersion}"
    testImplementation "org.mockito.kotlin:mockito-kotlin:${rootProject.ext.mockitoKotlinVersion}"

    testFixturesCompileOnly "com.google.code.gson:gson:${rootProject.ext.gsonVersion}"
    testFixturesCompileOnly "org.mockito:mockito-core:${rootProject.ext.mockitoCoreVersion}"
    testFixturesCompileOnly "org.mockito.kotlin:mockito-kotlin:${rootProject.ext.mockitoKotlinVersion}"
    testFixturesCompileOnly "org.powermock:powermock-module-junit4:${rootProject.ext.powerMockVersion}"

    testFixturesCompileOnly "com.github.spotbugs:spotbugs-annotations:${rootProject.ext.spotBugsAnnotationVersion}"
    testFixturesCompileOnly "org.projectlombok:lombok:${rootProject.ext.lombokVersion}"
    testFixturesCompileOnly "org.mockito:mockito-inline:${rootProject.ext.mockitoCoreVersion}"
    testFixturesAnnotationProcessor "org.projectlombok:lombok:${rootProject.ext.lombokVersion}"

    resolvableTestFixturesImplementation "org.robolectric:junit:${rootProject.ext.robolectricVersion}"

    implementation("io.opentelemetry:opentelemetry-api:${rootProject.ext.openTelemetryVersion}")
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

buildConfig {
    packageName("com.microsoft.identity.common.java")
    useJavaOutput()
}

afterEvaluate {
    assemble.dependsOn sourcesJar
    compileJava.dependsOn generateBuildConfig, generateTestBuildConfig
}

tasks.withType(GenerateMavenPom).all {
    destination = layout.buildDirectory.file("poms/${project.name}-${project.version}.pom").get().asFile
}

configurations {
    resolvableTestFixturesImplementation {
        canBeResolved true
    }
}

configurations.testFixturesImplementation.extendsFrom(configurations.resolvableTestFixturesImplementation)

idea {
    module {
        scopes.COMPILE.plus += [configurations.resolvableTestFixturesImplementation]
    }
}